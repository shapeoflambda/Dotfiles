#+TITLE: My Doom Configuration

* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Harish Chandran")
#+END_SRC

* Appearance
** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one-light)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (setq fancy-splash-image "~/Dotfiles/emacs/banner_dna.png")
#+END_SRC

** Display Font
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "MonoLisa" :size 15))
#+END_SRC

** Pretty bullets for Org-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+END_SRC

** Modeline height
#+BEGIN_SRC emacs-lisp
(setq doom-modeline-height 16)
#+END_SRC

#+RESULTS:
: 18

** Ellipsis
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "â¤µ")
#+END_SRC

** Hide emphasis markers
#+BEGIN_SRC emacs-lisp
(after! org (setq org-hide-emphasis-markers t))
#+END_SRC

#+RESULTS:
: t

* Preferences
** Inhibit startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Disable line numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type nil)
#+END_SRC

** =recentf= Settings

#+BEGIN_SRC emacs-lisp
(setq recentf-max-saved-items 100
      recentf-exclude '("/tmp/"
                        "/ssh:"
                        "/sudo:"
                        "recentf$"
                        "company-statistics-cache\\.el$"
                        ;; ctags
                        "/TAGS$"
                        ;; global
                        "/GTAGS$"
                        "/GRAGS$"
                        "/GPATH$"
                        ;; binary
                        "\\.mkv$"
                        "\\.mp[34]$"
                        "\\.avi$"
                        "\\.pdf$"
                        "\\.docx?$"
                        "\\.xlsx?$"
                        ;; sub-titles
                        "\\.sub$"
                        "\\.srt$"
                        "\\.ass$"
                        ;; autosave files
                        "workspaces/autosave$"
                        ))
#+END_SRC

* Org-mode
** Agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list
    "~/org/tasks/"))
#+END_SRC

** Custom TODO states
Define the TODO states that I use
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(i)" "BLOCKED(b)" "|" "DONE(d)" "KILL(k)")
 (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")))
#+END_SRC

** Change =TODO= entry to automatically change to DONE when all children are done
#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC

** Log the time when a TODO item is marked as =DONE=
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

** Don't evaluate src blocks during export
#+BEGIN_SRC emacs-lisp
(setq org-export-babel-evaluate nil)
#+END_SRC

** Fold outlines when opening an =org= file
#+BEGIN_SRC emacs-lisp
(setq org-startup-folded t)
#+END_SRC

** Enable spell check by default
   #+begin_src emacs-lisp
   (add-hook 'org-mode-hook 'turn-on-flyspell)
   #+end_src

   Don't check in source code and other blocks
   #+begin_src emacs-lisp
   (defadvice org-mode-flyspell-verify (after org-mode-flyspell-verify-hack activate)
  (let* ((rlt ad-return-value)
         (begin-regexp "^[ \t]*#\\+begin_\\(src\\|html\\|latex\\|example\\|quote\\)")
         (end-regexp "^[ \t]*#\\+end_\\(src\\|html\\|latex\\|example\\|quote\\)")
         (case-fold-search t)
         b e)
    (when ad-return-value
      (save-excursion
        (setq b (re-search-backward begin-regexp nil t))
        (if b (setq e (re-search-forward end-regexp nil t))))
      (if (and b e (< (point) e)) (setq rlt nil)))
    (setq ad-return-value rlt)))
   #+end_src

** Export to a different directory
  #+begin_src emacs-lisp
  (defadvice org-export-output-file-name (before org-add-export-dir activate)
  "Modifies org-export to place exported files in a different directory"
  (when (not pub-dir)
      (setq pub-dir "exported-org-files")
      (when (not (file-directory-p pub-dir))
       (make-directory pub-dir))))
   #+end_src

** Archive all done tasks using one command
#+BEGIN_SRC emacs-lisp
(defun org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'tree))
#+END_SRC

** Tag position
#+BEGIN_SRC emacs-lisp
(setq org-tags-column -80)
#+END_SRC

#+RESULTS:
: -80

* Org-roam
** Configuration
To first start using Org-roam, one needs to pick a location to store the
Org-roam files. The directory that will contain your notes, and database index
is specified by the variable =org-roam-directory=.

#+BEGIN_SRC emacs-lisp
(unless (file-exists-p "~/org-roam") (make-directory "~/org-roam"))
(setq org-roam-directory "~/org-roam")
(setq org-roam-graphviz-executable (executable-find "neato"))
(setq org-roam-graphviz-extra-options '(("overlap" . "false")))
#+END_SRC

#+RESULTS:
: ((overlap . false))

Enable the global minor mode org-roam-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'org-roam-mode)
#+END_SRC
** Ox-Hugo export
I use ox-hugo to export my org-roam notes to markdown and then to web pages. The
my/org-export-all-roam loops through all the org files and exports them one by
one.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-hugo
  (defun my/org-export-all-roam ()
    (interactive)
    (mapc (lambda (fPath)
            (ignore-errors (with-temp-buffer
                             (find-file-read-only fPath)
                             (org-hugo-export-to-md)
                             (kill-buffer))))
          (org-roam--list-files org-roam-directory)))
  (citeproc-org-setup))
;; Using Deft in org-mode
(setq deft-directory "~/org-roam/")
#+END_SRC

#+RESULTS:
: ~/org-roam/

* Org-capture
** Capture Templates
#+BEGIN_SRC emacs-lisp
(defun my/generate-org-note-name (&optional dir)
  (setq org-note--name (read-string "Name: "))
  (setq org-note--time (format-time-string "%Y%m%d"))
  (setq dirname (format "~/org/%s" dir))
  (message dirname)
  (expand-file-name (format "%s-%s.org" org-note--time org-note--name) dirname))
(defun my/create-meeting-note ()
  (my/generate-org-note-name "meeting"))
(defun my/create-interview-note ()
  (my/generate-org-note-name "interview"))

(setq org-capture-templates
      '(
        ("t" "Task"  entry
         (file "~/org/tasks/tasks.org")
         "* TODO %?\n%U")
        ("p" "Personal Task"  entry
         (file "~/org/tasks/personal.org")
         "* TODO %?\n%U")
        ("m" "Meeting Notes" entry
         (file my/create-meeting-note)
         (file "~/Dotfiles/emacs/templates/meeting.template"))
        ("i" "Interview Notes" entry
         (file my/create-interview-note)
         (file "~/Dotfiles/emacs/templates/interview.template"))
        )
      )
#+END_SRC

#+RESULTS:
| t | Task | entry | (file ~/org/tasks/tasks.org) | * TODO %? |

** Some useful Keybindings
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c c") 'org-capture)
(define-key global-map (kbd "C-c t")
  (lambda () (interactive) (org-capture nil "t")))
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (org-capture nil t) |
* Org-Agenda
** Agenda start date
#+BEGIN_SRC emacs-lisp
(setq org-agenda-start-day "0d")
(setq org-agenda-span 5)
(setq org-agenda-start-on-weekday nil)
#+END_SRC

#+RESULTS:

** Org-super-agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("z" "My view"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                                :time-grid t
                                :date today
                                :scheduled today
                                :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '(;; Each group has an implicit boolean OR operator between its selectors.
                          (:name "Due Today"
                                 :deadline today)
                          (:name "Passed Deadline"
                                 :and (:deadline past :todo ("TODO" "WAITING" "HOLD" "IN-PROGRESS"))
                                 :face (:background "#ffe2de"))
                          (:name "Work important"
                                 :and (:priority>= "B" :category "Work" :todo ("TODO" "IN-PROGRESS")))
                          (:name "Personal"
                                 :and (:category "personal" :todo ("TODO" "IN-PROGRESS")))
                          (:name "Bills"
                                 :and (:category "finance" :todo ("TODO" "IN-PROGRESS")))
                          (:name "Important"
                                 :priority "A")
                          (:name "Blocked"
                                 :todo "BLOCKED"
                                 :order 10)))))))))
(add-hook 'org-agenda-mode-hook 'org-super-agenda-mode)
#+END_SRC

#+RESULTS:
| org-super-agenda-mode | +org-habit-resize-graph-h | evil-org-agenda-mode |

* Mappings
** General
*** File finding
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map ",f" 'counsel-fzf)
(define-key evil-normal-state-map ",F" 'org-roam-find-file)
(define-key evil-normal-state-map ",c" 'org-capture)
(define-key evil-normal-state-map ",C" 'org-roam-capture)
(define-key evil-normal-state-map ",rf" 'counsel-recentf)
(define-key evil-normal-state-map ",e" 'dired)
#+END_SRC

#+RESULTS:
: dired

*** Describe things
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map ",df" 'describe-functions)
(define-key evil-normal-state-map ",dk" 'describe-key)
(define-key evil-normal-state-map ",dv" 'describe-variable)
#+END_SRC

*** Increment/Decrement just like vim
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(define-key evil-visual-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
(define-key evil-visual-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
#+END_SRC

#+RESULTS:
: evil-numbers/dec-at-pt

** Git
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map "]g" 'git-gutter:next-hunk)
(define-key evil-normal-state-map "[g" 'git-gutter:previous-hunk)
(define-key evil-normal-state-map ",gu" 'git-gutter:revert-hunk)
(define-key evil-normal-state-map ",gs" 'git-gutter:stage-hunk)
(define-key evil-normal-state-map ",gg" 'magit-status)
#+END_SRC

** Org-mode
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map ",oa" 'org-agenda)
(define-key evil-normal-state-map ",os" 'org-schedule)
(define-key evil-normal-state-map ",od" 'org-deadline)
(define-key evil-normal-state-map ",ot" 'org-todo)
(define-key evil-normal-state-map "  " 'org-todo)
(define-key evil-normal-state-map ",rr" 'org-babel-remove-result)
(define-key evil-normal-state-map ",ri" 'org-roam-insert)
(define-key evil-visual-state-map ",ri" 'org-roam-insert)
(define-key evil-normal-state-map ",rt" 'org-roam)
#+END_SRC

* Snippets

#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
#+END_SRC

* Ivy
Enable fuzzy matching

#+BEGIN_SRC emacs-lisp
(setq ivy-re-builders-alist '((counsel-rg . ivy--regex-plus)
 (swiper . ivy--regex-plus)
 (swiper-isearch . ivy--regex-plus)
 (t . ivy--regex-fuzzy)))
#+END_SRC

* Evil
** Get back default VIM behavior
#+BEGIN_SRC emacs-lisp
(evil-put-command-property 'evil-yank-line :motion 'evil-line)
(setq evil-want-change-word-to-end nil)
#+END_SRC

** Custom Text Objects
Select the entire document using 'd' and the current line 'l'. For example, =did= deletes the entire
document. Credits:[[github:https://github.com/syohex/evil-textobj-entire/blob/master/evil-textobj-entire.el][evil-textobj-entire.el]] & [[github:https://github.com/emacsorphanage/evil-textobj-line/blob/master/evil-textobj-line.el][evil-textobj-line.el]]
#+BEGIN_SRC emacs-lisp
(defcustom evil-custom-textobj-entire-key "d"
  "Key for evil-inner-entire"
  :type 'string
  :group 'evil-custom-textobj)

(defcustom evil-custom-textobj-in-line-key "l"
  "Keys for evil-inner-line"
  :type 'string
  :group 'evil-custom-textobj)

(defcustom evil-custom-textobj-around-line-key "l"
  "Keys for evil-around-line"
  :type 'string
  :group 'evil-custom-textobj)

(defun evil-line-range (count beg end type &optional inclusive)
  (if inclusive
      (evil-range (line-beginning-position) (line-end-position))
    (let ((start (save-excursion
                   (back-to-indentation)
                   (point)))
          (end (save-excursion
                 (goto-char (line-end-position))
                 (skip-syntax-backward " " (line-beginning-position))
                 (point))))
      (evil-range start end))))

(evil-define-text-object evil-custom-entire-buffer (count &optional beg end type)
  "Select entire buffer"
  (evil-range (point-min) (point-max)))

(evil-define-text-object evil-custom-around-line (count &optional beg end type)
  "Select range between a character by which the command is followed."
  (evil-line-range count beg end type t))
(evil-define-text-object evil-custom-inner-line (count &optional beg end type)
  "Select inner range between a character by which the command is followed."
  (evil-line-range count beg end type))

(define-key evil-outer-text-objects-map evil-custom-textobj-entire-key 'evil-custom-entire-buffer)
(define-key evil-inner-text-objects-map evil-custom-textobj-entire-key 'evil-custom-entire-buffer)
(define-key evil-outer-text-objects-map evil-custom-textobj-in-line-key 'evil-custom-around-line)
(define-key evil-inner-text-objects-map evil-custom-textobj-around-line-key 'evil-custom-inner-line)
#+END_SRC

** Split settings
Open splits to the right or in the bottom
#+BEGIN_SRC emacs-lisp
(setq evil-split-window-bottom t)
(setq evil-vsplit-window-right t)
#+END_SRC
* Git gutter
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(git-gutter:update-interval 2))
#+END_SRC
